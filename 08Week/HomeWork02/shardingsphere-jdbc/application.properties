# 打印sql
spring.shardingsphere.props.sql-show=true
# 配置数据源名称
spring.shardingsphere.datasource.names=ds0,ds1
# 配置数据源
spring.shardingsphere.datasource.common.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.common.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.common.username=root
spring.shardingsphere.datasource.common.password=123456
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3310/ds_bill_0?serverTimezone=UTC&characterEncoding=utf-8&useSSL=false
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3310/ds_bill_1?serverTimezone=UTC&characterEncoding=utf-8&useSSL=false

# 标准分片表配置
spring.shardingsphere.rules.sharding.tables.t_bill.actual-data-nodes=ds$->{0..1}.t_bill_$->{0..15}
# 分库策略
# 用于单分片键的标准分片场景
spring.shardingsphere.rules.sharding.tables.t_bill.database-strategy.standard.sharding-column=user_id
spring.shardingsphre.rules.sharding.tables.t_bill.database-strategy.standard.sharding-algorithm-name=t-bill-database-inline
# 分表策略
spring.shardingsphere.rules.sharding.tables.t_bill.table-strategy.standard.sharding-column=id
spring.shardingsphere.rules.sharding.tables.t_bill.table-strategy.standard.sharding-algorithm-name=t-bill-table-inline
spring.shardingsphere.rules.sharding.tables.t_bill.key-generate-strategy.column=id
spring.shardingsphere.rules.sharding.tables.t_bill.key-generate-strategy.key-generator-name=snowflake

# 分片算法配置
spring.shardingsphere.rules.sharding.sharding-algorithms.t-bill-database-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.t-bill-database-inline.props.algorithm-expression=ds$->{user_id % 2}
spring.shardingsphere.rules.sharding.sharding-algorithms.t-bill-table-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.t-bill-table-inline.props.algorithm-expression=t_bill_$->{id % 16}

# 标准分片表配置
spring.shardingsphere.rules.sharding.tables.t_bill_details.actual-data-nodes=ds$->{0..1}.t_bill_details_$->{0..15}
# 分库策略
# 用于单分片键的标准分片场景
spring.shardingsphere.rules.sharding.tables.t_bill_details.database-strategy.standard.sharding-column=bill_id
spring.shardingsphere.rules.sharding.tables.t_bill_details.database-strategy.standard.sharding-algorithm-name=t-bill-details-database-inline
# 分表策略
spring.shardingsphere.rules.sharding.tables.t_bill_details.table-strategy.standard.sharding-column=id
spring.shardingsphere.rules.sharding.tables.t_bill_details.table-strategy.standard.sharding-algorithm-name=t-bill-details-table-inline
spring.shardingsphere.rules.sharding.tables.t_bill_details.key-generate-strategy.column=id
spring.shardingsphere.rules.sharding.tables.t_bill_details.key-generate-strategy.key-generator-name=snowflake

# 分片算法配置
spring.shardingsphere.rules.sharding.sharding-algorithms.t-bill-details-database-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.t-bill-details-database-inline.props.algorithm-expression=ds$->{bill_id % 2}
spring.shardingsphere.rules.sharding.sharding-algorithms.t-bill-details-table-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.t-bill-details-table-inline.props.algorithm-expression=t_bill_details_$->{id % 16}


#主键生成策略
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
# 机器标识位，取值范围[0,1024)
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=123
